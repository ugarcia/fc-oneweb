// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.SkinnedColladaObject = (function(_super) {
    __extends(SkinnedColladaObject, _super);

    SkinnedColladaObject.prototype.app = null;

    SkinnedColladaObject.prototype.src = null;

    SkinnedColladaObject.prototype.scale = 1;

    SkinnedColladaObject.prototype.animations = null;

    SkinnedColladaObject.prototype.physics = false;

    SkinnedColladaObject.prototype.mass = 1;

    SkinnedColladaObject.prototype.speed = 0.1;

    SkinnedColladaObject.prototype.currentAnimation = null;

    SkinnedColladaObject.prototype.frame = 0;

    SkinnedColladaObject.prototype.skin = null;

    SkinnedColladaObject.prototype.morph = null;

    SkinnedColladaObject.prototype.mesh = null;

    SkinnedColladaObject.prototype.scene = null;

    SkinnedColladaObject.prototype.kAnimations = null;

    SkinnedColladaObject.prototype.kfAnimations = [];

    SkinnedColladaObject.prototype.obj = null;

    SkinnedColladaObject.prototype.skel = null;

    SkinnedColladaObject.prototype.hand = null;

    function SkinnedColladaObject(app, src, scale, physics, animations) {
      this.app = app;
      this.src = src;
      this.scale = scale;
      this.physics = physics;
      this.animations = animations;
      this.update = __bind(this.update, this);
    }

    SkinnedColladaObject.prototype.load = function(cb) {
      var _this = this;
      return require(["" + this.app.urlRoot + "/lib/js/ColladaLoader.js"], function() {
        var loader;
        loader = new THREE.ColladaLoader();
        loader.options.convertUpAxis = true;
        return loader.load(_this.src, function(collada) {
          console.log(collada);
          _this.scene = collada.scene;
          _this.skin = collada.skins[0];
          _this.morph = collada.morphs[0];
          _this.mesh = collada.meshes[0];
          _this.kAnimations = collada.animations;
          if (!!cb) {
            return cb();
          }
        });
      });
    };

    SkinnedColladaObject.prototype.init = function(scene) {
      var animHandler, aux, i, offset, skelKeys, _fn, _fn1, _i, _j, _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
        _this = this;
      this.scene.scale.x = this.scene.scale.y = this.scene.scale.z = this.scale;
      this.scene.updateMatrix();
      aux = (_ref = (_ref1 = (_ref2 = this.skin) != null ? _ref2 : this.morph) != null ? _ref1 : this.mesh) != null ? _ref : this.scene;
      offset = new THREE.Vector3().subVectors(aux.position, aux.geometry.getCenter());
      this.skel = this.scene.getChildByName("ZOMBIE");
      this.skel.position.sub(offset);
      if ((_ref3 = aux.geometry) != null) {
        _ref3.center();
      }
      if (this.physics) {
        this.obj = this.skin = new Physijs.ConeMesh(aux.geometry, aux.material, this.mass);
        this.obj.setAngularFactor(new THREE.Vector3(0, 1, 0));
      } else {
        this.obj = aux;
      }
      this.obj.scale.x = this.obj.scale.y = this.obj.scale.z = this.scale;
      this.obj.updateMatrix();
      animHandler = THREE.AnimationHandler;
      _fn = function(i) {
        var animation, kfAnimation;
        animation = _this.kAnimations[i];
        animHandler.add(animation);
        kfAnimation = new THREE.KeyFrameAnimation(animation.node, animation.name);
        kfAnimation.timeScale = 1;
        _this.kfAnimations.push(kfAnimation);
        return kfAnimation.play(false, 0);
      };
      for (i = _i = 0, _ref4 = this.kAnimations.length - 1; 0 <= _ref4 ? _i <= _ref4 : _i >= _ref4; i = 0 <= _ref4 ? ++_i : --_i) {
        _fn(i);
      }
      skelKeys = this.kAnimations[0].hierarchy[0].keys;
      _fn1 = function(i) {
        var kMatrix, vec;
        kMatrix = skelKeys[i].targets[0].data;
        vec = new THREE.Vector3().getPositionFromMatrix(kMatrix).sub(offset);
        return kMatrix.setPosition(vec);
      };
      for (i = _j = 0, _ref5 = skelKeys.length - 1; 0 <= _ref5 ? _j <= _ref5 : _j >= _ref5; i = 0 <= _ref5 ? ++_j : --_j) {
        _fn1(i);
      }
      this.debugLines(this.skel);
      this.obj.add(this.skel);
      this.frame = 0;
      this.setAnimationByName('idle');
      this.hand = new Physijs.BoxMesh(new THREE.SphereGeometry(5), new THREE.MeshBasicMaterial(), this.mass / 100);
      this.skel.getObjectByName("ZOMBIE_R_Hand", true).add(this.hand);
      return scene.add(this.obj);
    };

    SkinnedColladaObject.prototype.debugLines = function(obj) {
      var i, _i, _ref, _results,
        _this = this;
      if (obj && obj.children && obj.children.length) {
        _results = [];
        for (i = _i = 0, _ref = obj.children.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push((function(i) {
            var geometry;
            geometry = new THREE.Geometry();
            geometry.vertices.push(obj.children[i].position);
            geometry.vertices.push(new THREE.Vector3());
            obj.add(new THREE.Line(geometry));
            return _this.debugLines(obj.children[i]);
          })(i));
        }
        return _results;
      }
    };

    SkinnedColladaObject.prototype.update = function(delta) {
      var currLength, i, _i, _j, _ref, _ref1;
      if (this.skin && this.currentAnimation) {
        for (i = _i = 0, _ref = this.skin.morphTargetInfluences.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.skin.morphTargetInfluences[i] = 0;
        }
        this.skin.morphTargetInfluences[this.currentAnimation.start + this.frame] = 1;
        currLength = this.currentAnimation.end - this.currentAnimation.start;
        if (this.frame < currLength - 1 || this.currentAnimation.looping) {
          this.frame = (this.frame + 1) % currLength;
        } else {
          this.setAnimationByName('idle');
        }
        for (i = _j = 0, _ref1 = this.kfAnimations.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          this.kfAnimations[i].setFrame(this.currentAnimation.start + this.frame);
        }
        this.hand.__dirtyPosition = true;
        return this.hand.__dirtyRotation = true;
      }
    };

    SkinnedColladaObject.prototype.getPosition = function() {
      return this.obj.position;
    };

    SkinnedColladaObject.prototype.setAnimation = function(animation) {
      this.currentAnimation = animation;
      return this.frame = 0;
    };

    SkinnedColladaObject.prototype.setAnimationByName = function(animationName) {
      return this.setAnimation(this.animations[animationName]);
    };

    SkinnedColladaObject.prototype.getAnimationByName = function(animationName) {
      return this.animations[animationName];
    };

    SkinnedColladaObject.prototype.getAnimationByStartKey = function(key) {
      var anim;
      for (anim in this.animations) {
        if (this.animations[anim].start === key) {
          return this.animations[anim];
        }
      }
    };

    SkinnedColladaObject.prototype.getNextAnimation = function() {
      return this.getAnimationByStartKey((this.currentAnimation.end + 1) % (this.getMaxFrames() + 1));
    };

    SkinnedColladaObject.prototype.setNextAnimation = function() {
      return this.setAnimation(this.getNextAnimation());
    };

    SkinnedColladaObject.prototype.getMaxFrames = function() {
      var anim, maxFrames;
      maxFrames = 0;
      for (anim in this.animations) {
        if (this.animations[anim].end > maxFrames) {
          maxFrames = this.animations[anim].end;
        }
      }
      return maxFrames;
    };

    SkinnedColladaObject.prototype.move = function(direction) {
      var angle, angleDelta, axis, from;
      if (direction) {
        if (this.currentAnimation === this.getAnimationByName('idle')) {
          this.setAnimationByName('walk');
        }
        from = this.obj.getForward();
        angle = from.angleTo(direction);
        if (angle < 0.4 * Math.PI) {
          this.obj.position.add(from.multiplyScalar(this.speed));
          this.obj.__dirtyPosition = true;
        }
        if (angle > 0.02 * Math.PI) {
          axis = angle === Math.PI ? this.obj.up : new THREE.Vector3().crossVectors(from, direction).normalize();
          angleDelta = Math.min(this.speed * Math.PI, angle);
          this.obj.rotateOnAxis(new THREE.Vector3(0, axis.y, 0), angleDelta);
          return this.obj.__dirtyRotation = true;
        }
      } else {
        if (this.currentAnimation === this.getAnimationByName('walk')) {
          return this.setAnimationByName('idle');
        }
      }
    };

    SkinnedColladaObject.prototype.attack = function() {
      if (this.currentAnimation !== this.getAnimationByName('attack')) {
        return this.setAnimationByName('attack');
      }
    };

    return SkinnedColladaObject;

  })(ColladaObject);

}).call(this);
