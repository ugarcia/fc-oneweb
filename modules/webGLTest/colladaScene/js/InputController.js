// Generated by CoffeeScript 1.4.0
(function() {

  window.InputController = (function() {

    InputController.prototype.inputMappings = {
      player: {
        FORWARD: 0,
        BACKWARDS: 1,
        LEFT: 2,
        RIGHT: 3,
        ATTACK: 5
      },
      camera: {
        LEFT: 0,
        RIGHT: 1,
        UP: 2,
        DOWN: 3,
        ZOOM_IN: 4,
        ZOOM_OUT: 5
      }
    };

    InputController.prototype.inputs = {
      player: [null, null, null, null, false],
      camera: [0, 0, 0, 0, 0, 0]
    };

    function InputController() {
      this.init();
    }

    InputController.prototype.init = function() {
      var _this = this;
      window.addEventListener('keydown', function(e) {
        switch (e.keyCode) {
          case 32:
            return _this.inputs.player[_this.inputMappings.player.ATTACK] = true;
          case 37:
            return _this.inputs.player[_this.inputMappings.player.LEFT] = new THREE.Vector3(-1, 0, 0);
          case 39:
            return _this.inputs.player[_this.inputMappings.player.RIGHT] = new THREE.Vector3(1, 0, 0);
          case 38:
            return _this.inputs.player[_this.inputMappings.player.FORWARD] = new THREE.Vector3(0, 0, -1);
          case 40:
            return _this.inputs.player[_this.inputMappings.player.BACKWARDS] = new THREE.Vector3(0, 0, 1);
          case 65:
            return _this.inputs.camera[_this.inputMappings.camera.LEFT] = 1;
          case 68:
            return _this.inputs.camera[_this.inputMappings.camera.RIGHT] = -1;
          case 87:
            return _this.inputs.camera[_this.inputMappings.camera.UP] = 1;
          case 83:
            return _this.inputs.camera[_this.inputMappings.camera.DOWN] = -1;
          case 90:
            return _this.inputs.camera[_this.inputMappings.camera.ZOOM_IN] = -1;
          case 88:
            return _this.inputs.camera[_this.inputMappings.camera.ZOOM_OUT] = 1;
        }
      });
      return window.addEventListener('keyup', function(e) {
        switch (e.keyCode) {
          case 32:
            return _this.inputs.player[_this.inputMappings.player.ATTACK] = false;
          case 37:
            return _this.inputs.player[_this.inputMappings.player.LEFT] = null;
          case 39:
            return _this.inputs.player[_this.inputMappings.player.RIGHT] = null;
          case 38:
            return _this.inputs.player[_this.inputMappings.player.FORWARD] = null;
          case 40:
            return _this.inputs.player[_this.inputMappings.player.BACKWARDS] = null;
          case 65:
            return _this.inputs.camera[_this.inputMappings.camera.LEFT] = 0;
          case 68:
            return _this.inputs.camera[_this.inputMappings.camera.RIGHT] = 0;
          case 87:
            return _this.inputs.camera[_this.inputMappings.camera.UP] = 0;
          case 83:
            return _this.inputs.camera[_this.inputMappings.camera.DOWN] = 0;
          case 90:
            return _this.inputs.camera[_this.inputMappings.camera.ZOOM_IN] = 0;
          case 88:
            return _this.inputs.camera[_this.inputMappings.camera.ZOOM_OUT] = 0;
          default:
            return console.log("key " + e.keyCode + " is not associated");
        }
      });
    };

    InputController.prototype.getPlayerMovementTarget = function() {
      var target, v, _i, _ref, _ref1;
      target = new THREE.Vector3(0, 0, 0);
      for (v = _i = _ref = this.inputMappings.player.FORWARD, _ref1 = this.inputMappings.player.RIGHT; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; v = _ref <= _ref1 ? ++_i : --_i) {
        if (!!this.inputs.player[v]) {
          target.add(this.inputs.player[v]);
        }
      }
      return target;
    };

    InputController.prototype.isPlayerAttacking = function() {
      return this.inputs.player[this.inputMappings.player.ATTACK];
    };

    InputController.prototype.getCameraAngle = function() {
      return this.inputs.camera[this.inputMappings.camera.LEFT] + this.inputs.camera[this.inputMappings.camera.RIGHT];
    };

    InputController.prototype.getCameraSlopeAngle = function() {
      return this.inputs.camera[this.inputMappings.camera.UP] + this.inputs.camera[this.inputMappings.camera.DOWN];
    };

    InputController.prototype.getCameraDistance = function() {
      return this.inputs.camera[this.inputMappings.camera.ZOOM_IN] + this.inputs.camera[this.inputMappings.camera.ZOOM_OUT];
    };

    return InputController;

  })();

}).call(this);
