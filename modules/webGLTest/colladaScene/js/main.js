// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.ThreeApp = (function() {
    ThreeApp.prototype.urlRoot = '/';

    ThreeApp.prototype.container = null;

    ThreeApp.prototype.camera = null;

    ThreeApp.prototype.scene = null;

    ThreeApp.prototype.renderer = null;

    ThreeApp.prototype.fps = 25;

    ThreeApp.prototype.lastFrameTime = 0;

    ThreeApp.prototype.clock = null;

    ThreeApp.prototype.dae = null;

    ThreeApp.prototype.inputController = null;

    function ThreeApp(containerId, urlRoot) {
      this.update = __bind(this.update, this);
      var _this = this;
      this.container = document.getElementById(containerId);
      this.urlRoot = urlRoot != null ? urlRoot : this.urlRoot;
      require(["" + this.urlRoot + "/lib/js/three.min.js"], function() {
        return require(["" + _this.urlRoot + "/lib/js/physi.js"], function() {
          Physijs.scripts.worker = "" + _this.urlRoot + "/lib/js/physijs_worker.js";
          Physijs.scripts.ammo = "" + _this.urlRoot + "/lib/js/ammo.js";
          console.log(Physijs);
          return require(["" + _this.urlRoot + "/js/three.ext.js"], function() {
            return require(["" + _this.urlRoot + "/js/physi.ext.js"], function() {
              return _this.load();
            });
          });
        });
      });
    }

    ThreeApp.prototype.load = function() {
      var _this = this;
      return require(["" + this.urlRoot + "/js/ColladaObject.js"], function() {
        _this.dae = new ColladaObject(_this, "" + _this.urlRoot + "/models/zombie01/zombie.dae", 0.05, true, {
          walk: {
            start: 0,
            end: 27,
            looping: true
          },
          idle: {
            start: 28,
            end: 84,
            looping: true
          },
          attack: {
            start: 85,
            end: 106,
            looping: false
          }
        });
        return _this.dae.load(function() {
          return _this.init();
        });
      });
    };

    ThreeApp.prototype.init = function() {
      var box_material, ground, ground_material, i, _fn, _i,
        _this = this;
      this.lastFrameTime = 0;
      this.clock = new THREE.Clock();
      this.scene = new Physijs.Scene;
      this.scene.setGravity(new THREE.Vector3(0, -10, 0));
      this.scene.addEventListener('update', function() {
        return _this.scene.simulate(void 0, 2);
      });
      ground_material = Physijs.createMaterial(new THREE.MeshLambertMaterial({
        map: THREE.ImageUtils.loadTexture("" + this.urlRoot + "/images/rocks.jpg")
      }), .4, .4);
      ground_material.map.wrapS = ground_material.map.wrapT = THREE.RepeatWrapping;
      ground_material.map.repeat.set(5, 5);
      ground = new Physijs.BoxMesh(new THREE.CubeGeometry(20, 1, 20), ground_material, 0);
      ground.position.y = -2;
      this.scene.add(ground);
      box_material = Physijs.createMaterial(new THREE.MeshLambertMaterial({
        map: THREE.ImageUtils.loadTexture("" + this.urlRoot + "/images/plywood.jpg")
      }), .4, .2);
      box_material.map.wrapS = box_material.map.wrapT = THREE.RepeatWrapping;
      box_material.map.repeat.set(.25, .25);
      _fn = function(i) {
        var box, size;
        size = Math.random() * 2;
        box = new Physijs.BoxMesh(new THREE.CubeGeometry(size, size, size), box_material, 0.1);
        box.position.set(Math.random() * 10 - 5, 4, Math.random() * 10 - 5);
        return _this.scene.add(box);
      };
      for (i = _i = 0; _i <= 3; i = ++_i) {
        _fn(i);
      }
      this.scene.add(new THREE.AmbientLight(0xcccccc));
      this.renderer = new THREE.WebGLRenderer();
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.container.appendChild(this.renderer.domElement);
      this.dae.init(this.scene);
      require(["" + this.urlRoot + "/js/FollowCamera.js"], function() {
        return _this.camera = new FollowCamera(45, window.innerWidth / window.innerHeight, 1, 2000, _this.dae.getPosition(), 0, Math.PI / 12, 10);
      });
      require(["" + this.urlRoot + "/js/InputController.js"], function() {
        return _this.inputController = new InputController();
      });
      requestAnimationFrame(this.update);
      return this.scene.simulate();
    };

    ThreeApp.prototype.update = function() {
      var target, _ref, _ref1, _ref2, _ref3, _ref4;
      requestAnimationFrame(this.update);
      this.lastFrameTime += this.clock.getDelta();
      if (this.lastFrameTime >= (1.0 / this.fps)) {
        this.lastFrameTime = 0;
        if (this.dae) {
          target = (_ref = this.inputController) != null ? _ref.getPlayerMovementTarget() : void 0;
          if (target && (target.x || target.y || target.z)) {
            target.transformDirection(this.camera.matrix).projectOnPlane(new THREE.Vector3(0, 1, 0)).normalize();
          } else {
            target = null;
          }
          this.dae.move(target);
          if (!!((_ref1 = this.inputController) != null ? _ref1.isPlayerAttacking() : void 0)) {
            this.dae.attack();
          }
          this.dae.update(1.0 / this.fps);
        }
        if (this.camera) {
          this.camera.addAngle((_ref2 = this.inputController) != null ? _ref2.getCameraAngle() : void 0);
          this.camera.addSlopeAngle((_ref3 = this.inputController) != null ? _ref3.getCameraSlopeAngle() : void 0);
          this.camera.addDistance((_ref4 = this.inputController) != null ? _ref4.getCameraDistance() : void 0);
          this.camera.update(this.clock.getDelta());
        }
        if (!(!this.camera || !this.scene)) {
          return this.renderer.render(this.scene, this.camera);
        }
      }
    };

    return ThreeApp;

  })();

  window.app = new ThreeApp('canvas', '/OneWeb/modules/webGLTest/colladaScene');

}).call(this);
