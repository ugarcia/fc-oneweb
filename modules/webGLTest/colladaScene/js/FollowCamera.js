// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.FollowCamera = (function(_super) {

    __extends(FollowCamera, _super);

    FollowCamera.prototype.target = new THREE.Vector3(0, 0, 0);

    FollowCamera.prototype.angle = Math.PI;

    FollowCamera.prototype.slopeAngle = Math.PI / 4;

    FollowCamera.prototype.distance = 5;

    FollowCamera.prototype.speed = 0.05;

    FollowCamera.prototype.minZoom = 1;

    FollowCamera.prototype.maxZoom = 50;

    FollowCamera.prototype.zoomMultiplier = 5;

    function FollowCamera(fov, aspect, near, far, target, angle, slopeAngle, distance) {
      THREE.PerspectiveCamera.call(this, fov, aspect, near, far);
      this.angle = angle != null ? angle : this.angle;
      this.slopeAngle = slopeAngle != null ? slopeAngle : this.slopeAngle;
      this.distance = distance != null ? distance : this.distance;
      this.target = target != null ? target : this.target;
    }

    FollowCamera.prototype.update = function(delta) {
      var offsetX, offsetY, offsetZ;
      offsetX = this.distance * Math.cos(this.slopeAngle) * Math.sin(this.angle);
      offsetY = this.distance * Math.sin(this.slopeAngle);
      offsetZ = this.distance * Math.cos(this.slopeAngle) * Math.cos(this.angle);
      this.position.set(this.target.x + offsetX, this.target.y + offsetY, this.target.z + offsetZ);
      return this.lookAt(this.target);
    };

    FollowCamera.prototype.addAngle = function(ang) {
      if (!!ang) {
        return this.angle += this.speed * ang;
      }
    };

    FollowCamera.prototype.addSlopeAngle = function(ang) {
      var b;
      b = ang && ((ang > 0 && this.slopeAngle > 0.95 * Math.PI / 2) || (ang < 0 && this.slopeAngle < -0.95 * Math.PI / 2));
      if (!b) {
        return this.slopeAngle += this.speed * ang;
      }
    };

    FollowCamera.prototype.addDistance = function(d) {
      var b;
      b = d && ((d > 0 && this.distance > this.maxZoom) || (d < 0 && this.distance < this.minZoom));
      if (!b) {
        return this.distance += this.zoomMultiplier * this.speed * d;
      }
    };

    return FollowCamera;

  })(THREE.PerspectiveCamera);

}).call(this);
